{"version":3,"sources":["scripts/js/DOM&CSSManipulations.js","scripts/js/Patterns.js","scripts/js/CreateTiles.js","scripts/js/Game.js","scripts/js/Animations.js","scripts/js/AdditionalFunctions.js","scripts/script.js"],"names":["board","document","querySelector","minesLeftLabel","tileTemplate","root","controlsContainer","victoryContainer","openCustomizeMenuVictoryButton","defeatContainer","resetGameDefeatButton","renderTile","tile","animation","fragment","content","cloneNode","container","dataset","tileId","id","tileText","mines","numberOfMinesAroundMe","textContent","style","color","tileState","i","div","createElement","appendChild","state","isAnimate","querySelectorAll","forEach","piece","remove","applySize","size","setProperty","updateMinesLeft","minesLeft","applyState","checkBoardWidth","boardWidth","offsetWidth","width","openVictoryBox","setTimeout","clickable","openDefeatBox","TILE_STATES","NUMBER","HIDDEN","MINE","MARKED","REVEAL_WITHOUT_ANIMATING","tilePattern","row","column","isMine","GAME_STATES","IN_PROGRESS","Symbol","ENDED","ANIMATION_SPEEDS","FAST","SLOW","randomNumbers","tiles","createTiles","quantityRandomNumbers","getRandomNumbers","index","createTile","calculateNumberOfMinesAroundMe","rest","Math","floor","parseInt","some","number","push","br","k","potentialMine","findTile","find","max","numbers","Set","randomNumber","getRndInteger","add","min","random","isWon","firstOption","filter","every","secondOption","revealTiles","revealEmptyTilesWithoutAnimatingTiles","emptyTiles","determineEmptyTilesAroundTile","length","directionMap","Map","potentialEmptyTile","direction","get","revealEmptyTiles","animateTile","speed","animateTiles","order","makePattern","tileElement","wrapper","pieces","animationDuration","reverseArray","animationName","initialValue","array","reduce","reversedArray","unshift","isMobilePhoneOrTablet","a","check","navigator","userAgent","vendor","window","opera","test","substr","numberOfMines","gameState","markedMinesColor","minesImage","darkLightThemeContainer","menuButton","menu","closest","customizeButtonInMenu","rulesButtonInMenu","customizeContainer","rulesContainer","closeCustomizeWindowButton","closeRulesWindowButton","toggleAnimationsButton","toggleAnimationsContainer","animationsButton","BoardSizesOptions","difficultyLevelOptions","speedOptions","MarkedMinesColorOptions","minesImagesOptions","applyChangesButton","resetButton","toggleSoundButton","toggleSoundButtonTooltip","resourcesTrack","getStartedButton","loader","backgroundMusic","loop","volume","applauseSound","explosionSound","openMenuSound","preExplosionSound","loaderExplosionSound","music","checkWidthForRenderingProperties","innerWidth","disabled","classList","enableBoardSize","disableAnimationsInHTML","setActiveClassForCurrentBoardSize","disableBoardSize","calculatePossibleNumberOfMines","options","ceil","option","value","innerHTML","checked","optionElement","addEventListener","e","currentTime","play","target","matches","renderProperBoardSizeMenuImage","boardSizeImage12x12Element","boardSizeImage9x9Element","boardSizeImage6x6Element","body","contains","src","checkTheme","toggle","openCustomizeMenu","scrollTop","position","closeCustomizeMenu","openRulesContainer","closeRulesWindow","toggleAnimations","updateMarkedMineColorOnBoard","updateMinesImageOnBoard","targetImageOption","mineImage","toggleSound","pause","resetGame","parent","opened","loadingState","pointerEvents","opacity","startDate","endDate","freezeBoard","isFrozen","durationOfFreezing","stopFreezing","checkWidthForAnimationsAndBoard","HandleShortcuts","altKey","code","HandleClickOnATile","dataStateElement","button","durationOfTheTouch","undefined","closeVictoryBox","closeDefeatBox","onload","oncontextmenu","Date","timeStamp","getTime","getMilliseconds"],"mappings":"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","file":"script.5f26d876.js","sourceRoot":"..\\app","sourcesContent":["\r\n\r\n// DOM elements\r\nconst board = document.querySelector('[data-board]');\r\nconst minesLeftLabel = document.querySelector('[data-remaining-mines]');\r\nconst tileTemplate = document.querySelector('#tile-template');\r\nconst root = document.querySelector(':root');\r\nconst controlsContainer = document.querySelector(\".controls-container\");\r\nconst victoryContainer = document.querySelector('.victory-container-wrapper');\r\nconst openCustomizeMenuVictoryButton = document.querySelector('.victory-container-wrapper .open-customize-menu-button-container > button');\r\nconst defeatContainer = document.querySelector('.defeat-container-wrapper');\r\nconst resetGameDefeatButton = document.querySelector('.defeat-container-wrapper .reset-button-container > button');\r\n\r\n// renders individual tile on a page\r\nexport function renderTile(tile, animation) {\r\n  const fragment = tileTemplate.content.cloneNode(true);\r\n\r\n  const container = fragment.querySelector('[data-tile]');\r\n  container.dataset.tileId = tile.id;\r\n\r\n  const tileText = fragment.querySelector('[data-text]');\r\n  const mines = tile.numberOfMinesAroundMe;\r\n  tileText.textContent = mines;\r\n  // don't appear the number of mines if it's 0\r\n  if (mines == 0) tileText.style.color = 'transparent';\r\n\r\n  const tileState = fragment.querySelector('[data-state]');\r\n  for (let i = 0; i < 16 ; i++) {\r\n    const div = document.createElement(\"div\");\r\n    tileState.appendChild(div);\r\n  }\r\n  tileState.dataset.state = tile.state;\r\n\r\n  if (!animation.isAnimate) {\r\n    tileState.dataset.animation = 'false';\r\n  }\r\n\r\n  if (!animation.isAnimate) {\r\n    const pieces = fragment.querySelectorAll('[data-state] > div');\r\n    pieces.forEach(piece => piece.remove());\r\n  }\r\n\r\n  board.appendChild(container);\r\n}\r\n\r\n// updates css variable --size\r\nexport function applySize(size) {\r\n  root.style.setProperty('--size', `${size}`);\r\n}\r\n\r\n// update number of mine left\r\nexport function updateMinesLeft(minesLeft) {\r\n  minesLeftLabel.textContent = `Mines left: ${minesLeft}`;\r\n}\r\n\r\n// applies state of tile\r\nexport function applyState(tile) {\r\n  const container = board.querySelector(`[data-tile-id=\"${tile.id}\"`);\r\n  const blanket = container.querySelector('[data-state]');\r\n  blanket.dataset.state = tile.state;\r\n}\r\n\r\n// keeps the width of the board and width of the container for remaining mines be the same\r\nexport function checkBoardWidth() {\r\n  const boardWidth = board.offsetWidth;\r\n  controlsContainer.style.width = `${boardWidth}px`;\r\n}\r\n\r\n// opens victory box when user win\r\nexport function openVictoryBox() {\r\n  victoryContainer.dataset.state = 'active';\r\n  setTimeout(() => {\r\n    openCustomizeMenuVictoryButton.dataset.clickable = 'true';\r\n  }, 3800);\r\n}\r\n\r\n// opens defeat box when user lose\r\nexport function openDefeatBox() {\r\n  defeatContainer.dataset.state = 'active';\r\n  setTimeout(() => {\r\n    resetGameDefeatButton.dataset.clickable = 'true';\r\n  }, 1300);\r\n}","\r\n// object that defines tile states\r\nexport const TILE_STATES = {\r\n  NUMBER: 'number',\r\n  HIDDEN: 'hidden',\r\n  MINE: 'mine',\r\n  MARKED: 'marked',\r\n  REVEAL_WITHOUT_ANIMATING: 'revealWithoutAnimating'\r\n}\r\n\r\n// default tile object\r\nexport const tilePattern = {\r\n  id: 0,\r\n  row: 0,\r\n  column: 0,\r\n  isMine: false,\r\n  numberOfMinesAroundMe: 0,\r\n  state: TILE_STATES.HIDDEN\r\n};\r\n\r\n// object that defines game states\r\nexport const GAME_STATES = {\r\n  IN_PROGRESS: Symbol('inProgress'),\r\n  ENDED: Symbol('ended')\r\n};\r\n\r\n// animation speeds\r\nexport const ANIMATION_SPEEDS = {\r\n  FAST: 15,\r\n  SLOW: 40\r\n};","\r\n// imports\r\nimport { applySize } from './DOM&CSSManipulations.js';\r\nimport { tilePattern } from './Patterns.js';\r\n\r\n// global variables\r\nlet randomNumbers = [];\r\nlet tiles = [];\r\n\r\n// creates tiles\r\nexport default function createTiles(size, quantityRandomNumbers) {\r\n  tiles = [];\r\n  applySize(size);\r\n  randomNumbers = getRandomNumbers(size * size, quantityRandomNumbers);\r\n  for (let index = 0; index < size * size; index++) {\r\n    createTile(index, index % size, size);\r\n  }\r\n  for (let index = 0; index < size * size; index++) {\r\n    const mines = calculateNumberOfMinesAroundMe(tiles[index], size);\r\n    tiles[index].numberOfMinesAroundMe = mines;\r\n  }\r\n  return tiles;\r\n}\r\n\r\n// creates individual tile\r\nfunction createTile(index, rest, size) {\r\n  // const indexReduced = index.toString().split('');\r\n  // if (indexReduced.length == 1) indexReduced.unshift('0');\r\n  const [row, column] = [Math.floor(index / size), rest];\r\n  const id = parseInt(index + 1);\r\n  const isMine = randomNumbers.some(number => number === id);\r\n  const tile = {\r\n    ...tilePattern,\r\n    id: id,\r\n    isMine: isMine,\r\n    row: parseInt(row) + 1,\r\n    column: parseInt(column) + 1\r\n  };\r\n  tiles.push(tile);\r\n}\r\n\r\n// calculating number of mine around individual tile\r\nfunction calculateNumberOfMinesAroundMe(tile, size) {\r\n  const [row, column] = [tile.row, tile.column];\r\n  let br = 0;\r\n  for (let i = row - 1; i <= row + 1; i++) {\r\n    for (let k = column - 1; k <= column + 1; k++) {\r\n      if (i == 0 && k == 0) continue;\r\n      const potentialMine = findTile(i, k, size);\r\n      if (potentialMine == null) continue;\r\n      if (potentialMine.isMine) br++;\r\n    }\r\n  }\r\n  return br;\r\n}\r\n\r\n// search for tile with specific row and column\r\nexport function findTile(row, column, size) {\r\n  if (row < 1 || row > size || column < 1 || column > size) return null;\r\n  return tiles.find(tile => tile.row == row && tile.column == column);\r\n}\r\n\r\n// returns array of random numbers between 0 and 100\r\nfunction getRandomNumbers(max, size) {\r\n  const numbers = new Set([]);\r\n  while (numbers.size < size) {\r\n    const randomNumber = getRndInteger(1, max);\r\n    numbers.add(parseInt(randomNumber));\r\n  }\r\n  return [...numbers];\r\n}\r\n\r\n// returns random number between min and max values\r\nfunction getRndInteger(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}","\r\n// imports\r\nimport { TILE_STATES } from './Patterns.js';\r\nimport { applyState } from './DOM&CSSManipulations.js';\r\nimport { findTile } from './CreateTiles.js';\r\n\r\n// DOM elements\r\nconst board = document.querySelector('[data-board]');\r\n\r\n// checks if the game is won or not\r\nexport function isWon(tiles) {\r\n  const nonMines = tiles.filter(tile => !tile.isMine);\r\n  const firstOption = nonMines.every(tile => tile.state === TILE_STATES.NUMBER);\r\n\r\n  const mines = tiles.filter(tile => tile.isMine);\r\n  const secondOption = mines.every(tile => tile.state === TILE_STATES.MARKED);\r\n\r\n  return firstOption || secondOption;\r\n}\r\n\r\n// reveals all tiles\r\nexport function revealTiles(tiles) {\r\n  tiles.forEach(tile => {\r\n    if (tile.isMine) {\r\n      if (tile.state != TILE_STATES.MARKED) {\r\n        tile.state = TILE_STATES.MINE;\r\n        const tileElement = board.querySelector(`[data-tile-id=\"${tile.id}\"]`);\r\n        const pieces = tileElement.querySelectorAll('[data-state] > div');\r\n        pieces.forEach(piece => piece.remove());\r\n      }\r\n        applyState(tile);\r\n    } else {\r\n      tile.state = TILE_STATES.REVEAL_WITHOUT_ANIMATING;\r\n    }\r\n    applyState(tile);\r\n  });\r\n}\r\n\r\nexport function revealEmptyTilesWithoutAnimatingTiles(tile, size) {\r\n  const emptyTiles = determineEmptyTilesAroundTile(tile, size);\r\n  if (emptyTiles.length == 0) return;\r\n  emptyTiles.forEach(({tile}) => {\r\n    if (tile.state === TILE_STATES.NUMBER) return;\r\n    tile.state = TILE_STATES.NUMBER;\r\n    applyState(tile);\r\n    revealEmptyTilesWithoutAnimatingTiles(tile, size);\r\n  });\r\n}\r\n\r\n// returns an array of empty tiles around specific tile\r\nexport function determineEmptyTilesAroundTile(tile, size) {\r\n  const [row, column] = [tile.row, tile.column];\r\n  const directionMap = new Map([\r\n    [`${row - 1}-${column - 1}`, 'bottomRightToTopLeft'],\r\n    [`${row - 1}-${column}`, 'bottomToTop'],\r\n    [`${row - 1}-${column + 1}`, 'bottomLeftToTopRight'],\r\n    [`${row}-${column + 1}`, 'leftToRight'],\r\n    [`${row}-${column - 1}`, 'rightToLeft'],\r\n    [`${row + 1}-${column + 1}`, 'topLeftToBottomRight'],\r\n    [`${row + 1}-${column}`, 'topToBottom'],\r\n    [`${row + 1}-${column - 1}`, 'topRightToBottomLeft']\r\n  ]);\r\n  // console.log(directionMap.get({i: row, k: column}))\r\n  let emptyTiles = [];\r\n  for (let i = row - 1; i <= row + 1; i++) {\r\n    for (let k = column - 1; k <= column + 1; k++) {\r\n      if (i == 0 && k == 0) continue;\r\n      const potentialEmptyTile = findTile(i, k, size);\r\n      if (potentialEmptyTile == null) continue;\r\n      if (potentialEmptyTile.numberOfMinesAroundMe == 0) {\r\n        emptyTiles.push({\r\n          tile: potentialEmptyTile,\r\n          direction: directionMap.get(`${i}-${k}`)\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return emptyTiles;\r\n}\r\n","\r\n// imports\r\nimport { applyState } from './DOM&CSSManipulations.js';\r\nimport { determineEmptyTilesAroundTile } from './Game.js';\r\nimport { TILE_STATES } from './Patterns.js';\r\n\r\n// DOM elements\r\nconst board = document.querySelector('[data-board]');\r\n\r\n// reveals empty tiles\r\nexport function revealEmptyTiles(tile, size, animation) {\r\n  const emptyTiles = determineEmptyTilesAroundTile(tile, size);\r\n  if (emptyTiles.length == 0) return;\r\n  emptyTiles.forEach(({tile, direction}) => {\r\n    setTimeout(() => {\r\n      if (tile.state === TILE_STATES.NUMBER) return;\r\n      tile.state = TILE_STATES.NUMBER;\r\n      applyState(tile);\r\n      const tileElement = board.querySelector(`[data-tile-id=\"${tile.id}\"]`);\r\n      animateTile(tileElement, animation.speed, direction, 'erase');\r\n      setTimeout(() => {\r\n        revealEmptyTiles(tile, size, animation);\r\n      }, animation.speed * emptyTiles.length);\r\n    }, animation.speed);\r\n  });\r\n}\r\n\r\n// animates all tiles\r\nexport function animateTiles(size, speed) {\r\n  const tiles = [...board.querySelectorAll('[data-tile]')];\r\n  const order = makePattern(size);\r\n\r\n  for (let i = 0; i < tiles.length; i++) {\r\n    setTimeout(() => {\r\n      animateTile(tiles[order[i] - 1], speed);\r\n    }, speed * i);\r\n  }\r\n}\r\n\r\n// animates a particular tile\r\nexport function animateTile(tileElement, speed, direction = 'topLeftToBottomRight', animation = 'create') {\r\n  const wrapper = tileElement.querySelector('[data-state]');\r\n  if (animation == 'create') {\r\n    wrapper.dataset.state = 'hidden';\r\n  }\r\n  const pieces = [...wrapper.querySelectorAll('div')];\r\n  const animationDuration = speed;\r\n  const orderMap = new Map([\r\n    ['bottomRightToTopLeft', reverseArray(makePattern(4))],\r\n    ['bottomToTop', [13, 14, 15, 16, 9, 10, 11, 12, 5, 6, 7, 8, 1, 2, 3, 4]],\r\n    ['bottomLeftToTopRight', [13, 9, 14, 5, 10, 15, 1, 6, 11, 16, 2, 7, 12, 3, 8, 4]],\r\n    ['leftToRight', [1, 5, 9, 13,  2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16]],\r\n    ['rightToLeft', reverseArray([1, 5, 9, 13,  2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16])],\r\n    ['topLeftToBottomRight', makePattern(4)],\r\n    ['topToBottom', reverseArray([13, 14, 15, 16, 9, 10, 11, 12, 5, 6, 7, 8, 1, 2, 3, 4])],\r\n    ['topRightToBottomLeft', reverseArray([13, 9, 14, 5, 10, 15, 1, 6, 11, 16, 2, 7, 12, 3, 8, 4])]\r\n  ]);\r\n  const order = orderMap.get(direction);\r\n\r\n  for (let i = 0; i < pieces.length; i++) {\r\n    setTimeout(() => {\r\n      if (animation != 'create') {\r\n        pieces[order[i] - 1].style.animationName = 'erase-piece-of-tile';\r\n      } else {\r\n        pieces[order[i] - 1].style.animationName = 'create-piece-of-tile';\r\n      }\r\n      // pieces[order[i] - 1].style.animationDelay = `${animationDuration * i}ms`;\r\n    }, animationDuration * i);\r\n  }\r\n}\r\n\r\n// making an order of tiles when loading\r\n// (loading tiles from the upper left corner to the lower right corner)\r\nfunction makePattern(size) {\r\n  const order = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    let initialValue = i + 1;\r\n    for (let k = 0; k <= i; k++) {\r\n      order.push(initialValue);\r\n      initialValue += size - 1;\r\n    }\r\n  }\r\n\r\n  for (let i = 2; i <= size; i++) {\r\n    let initialValue = size * i;\r\n    for (let k = 0; k <= size - i; k++) {\r\n      order.push(initialValue);\r\n      initialValue += size - 1;\r\n    }\r\n  }\r\n\r\n  return order;\r\n}\r\n\r\n// reverses an array\r\nfunction reverseArray(array) {\r\n  return array.reduce((reversedArray, i) => {\r\n    reversedArray.unshift(i);\r\n    return reversedArray;\r\n  }, []);\r\n}\r\n","\r\n// checks whether the user is on a mobile phone/tablet or on a computer\r\nexport function isMobilePhoneOrTablet() {\r\n  let check = false;\r\n  (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\r\n  return check;\r\n};","// imports\r\nimport createTiles from './js/CreateTiles.js';\r\nimport {\r\n  applySize,\r\n  applyState,\r\n  updateMinesLeft,\r\n  renderTile,\r\n  checkBoardWidth,\r\n  openVictoryBox,\r\n  openDefeatBox\r\n} from './js/DOM&CSSManipulations.js';\r\nimport { TILE_STATES, GAME_STATES, ANIMATION_SPEEDS } from './js/Patterns.js';\r\nimport {\r\n  revealTiles,\r\n  revealEmptyTilesWithoutAnimatingTiles,\r\n  isWon\r\n} from './js/Game.js';\r\nimport {\r\n  revealEmptyTiles,\r\n  animateTiles,\r\n  animateTile\r\n} from './js/Animations.js';\r\nimport { isMobilePhoneOrTablet } from './js/AdditionalFunctions.js';\r\n\r\n// global variables\r\nlet size = 12;\r\nlet numberOfMines = 12;\r\nlet minesLeft = numberOfMines;\r\nlet tiles = [];\r\nlet gameState = GAME_STATES.IN_PROGRESS;\r\nconst animation = {\r\n  isAnimate: true,\r\n  speed: ANIMATION_SPEEDS.FAST\r\n};\r\nlet markedMinesColor = 'yellow';\r\nlet minesImage = 'explosion';\r\n\r\n//                Handling header and customize window buttons\r\n\r\n// DOM elements\r\nconst darkLightThemeContainer = document.querySelector('.dark-light-theme');\r\nconst menuButton = document.querySelector('.menu-icon > svg');\r\nconst menu = menuButton.closest('.menu');\r\nconst customizeButtonInMenu = document.querySelector(\r\n  '.menu-content .option:nth-child(1)'\r\n);\r\nconst rulesButtonInMenu = document.querySelector(\r\n  '.menu-content .option:nth-child(2)'\r\n);\r\nconst customizeContainer = document.querySelector('.customize-container');\r\nconst rulesContainer = document.querySelector('.rules-container');\r\nconst closeCustomizeWindowButton = document.querySelector(\r\n  '.customize-container .times'\r\n);\r\nconst closeRulesWindowButton = document.querySelector(\r\n  '.rules-container .times'\r\n);\r\nconst toggleAnimationsButton = document.querySelector(\r\n  '.animations-container .row'\r\n);\r\nconst toggleAnimationsContainer = document.querySelector(\r\n  '.animations-and-appearance > .row[data-disabled]'\r\n);\r\nconst animationsButton = document.querySelector(\r\n  '.animations-container .animations-button'\r\n);\r\nconst BoardSizesOptions = document.querySelectorAll(\r\n  '.board-sizes .dimensions .option .wrapper'\r\n);\r\nconst difficultyLevelOptions = document.querySelectorAll(\r\n  '.levels .level input'\r\n);\r\nconst speedOptions = document.querySelectorAll('.speed-options .option input');\r\nconst MarkedMinesColorOptions = document.querySelectorAll(\r\n  '.color-palette .color'\r\n);\r\nconst minesImagesOptions = document.querySelectorAll('.mines-pictures .image');\r\nconst applyChangesButton = document.querySelector(\r\n  '.apply-button-container button'\r\n);\r\nconst board = document.querySelector('[data-board]');\r\nconst resetButton = document.querySelector('[data-reset]');\r\nconst minesLeftLabel = document.querySelector('[data-remaining-mines]');\r\nconst toggleSoundButton = document.querySelector('[data-toggle-sound]');\r\nconst toggleSoundButtonTooltip = document.querySelector(\r\n  '[data-toggle-sound] .tooltip'\r\n);\r\nconst victoryContainer = document.querySelector('.victory-container-wrapper');\r\nconst openCustomizeMenuVictoryButton = document.querySelector(\r\n  '.victory-container-wrapper .open-customize-menu-button-container > button'\r\n);\r\nconst defeatContainer = document.querySelector('.defeat-container-wrapper');\r\nconst resetGameDefeatButton = document.querySelector(\r\n  '.defeat-container-wrapper .reset-button-container > button'\r\n);\r\nconst resourcesTrack = document.querySelector('.credits-container .track');\r\nconst getStartedButton = document.querySelector('[data-get-started]');\r\nconst loader = document.querySelector('#loader');\r\n\r\n\r\n//                            Sounds\r\n// sounds on the page\r\nconst backgroundMusic = document.querySelector('[data-background-music]');\r\nbackgroundMusic.loop = true;\r\nbackgroundMusic.volume = 0.3;\r\nconst applauseSound = document.querySelector('[data-applause-sound-effect]');\r\napplauseSound.volume = 0.5;\r\nconst explosionSound = document.querySelector('[data-explosion-sound-effect]');\r\nexplosionSound.volume = 0.5;\r\nconst openMenuSound = document.querySelector('[data-open-menu-sound-effect]');\r\nopenMenuSound.volume = 0.5;\r\n// sounds for loading animation (animation at the beginning)\r\nconst preExplosionSound = document.querySelector('[data-pre-bomb-explosion-sound-effect]');\r\npreExplosionSound.loop = true;\r\npreExplosionSound.volume = 0.3;\r\nconst loaderExplosionSound = document.querySelector('[data-loader-explosion-sound-effect]');\r\nloaderExplosionSound.volume = 0.6;\r\n\r\n// determines whether music is turned off or turned on\r\nlet music = true;\r\n\r\n// document.onclick = () => {\r\n//   console.log(size, numberOfMines, markedMinesColor, minesImage, animation)\r\n// }\r\n\r\n// checks the width of the device and according to that disables/enables certain properties on the page\r\nconst checkWidthForRenderingProperties = () => {\r\n  const width = window.innerWidth;\r\n  if (width > 550) {\r\n    toggleAnimationsContainer.dataset.disabled = 'false';\r\n    if (animation.isAnimate) {\r\n      animationsButton.classList.add('on');\r\n    }\r\n    enableBoardSize(9);\r\n    enableBoardSize(12);\r\n  }\r\n  if (width <= 550 && width > 420) {\r\n    disableAnimationsInHTML();\r\n    enableBoardSize(9);\r\n    enableBoardSize(12);\r\n    // resetGame();\r\n  }\r\n  if (width <= 420 && width > 340) {\r\n    disableAnimationsInHTML();\r\n    enableBoardSize(9);\r\n    if (size == 12) {\r\n      // size = 9;\r\n      setActiveClassForCurrentBoardSize(9);\r\n    }\r\n    disableBoardSize(12);\r\n  }\r\n  if (width <= 340) {\r\n    disableAnimationsInHTML();\r\n    if (size == 12 || size == 9) {\r\n      // size = 6;\r\n      setActiveClassForCurrentBoardSize(6);\r\n    }\r\n    disableBoardSize(9);\r\n    disableBoardSize(12);\r\n  }\r\n};\r\n\r\n// rendering proper properties according to the page width\r\n// window.onload = () => {\r\n//   checkWidthForRenderingProperties();\r\n// };\r\n\r\n// window.onresize = () => {\r\n//   checkWidthForRenderingProperties();\r\n// };\r\n\r\n// disabling and enabling specific board size option\r\nfunction disableBoardSize(size) {\r\n  const targetBoardSizeElement = document.querySelector(\r\n    `.board-sizes .dimensions .option[data-size=\"${size}\"]`\r\n  );\r\n  targetBoardSizeElement.dataset.disabled = 'true';\r\n}\r\n\r\nfunction enableBoardSize(size) {\r\n  const targetBoardSizeElement = document.querySelector(\r\n    `.board-sizes .dimensions .option[data-size=\"${size}\"]`\r\n  );\r\n  targetBoardSizeElement.dataset.disabled = 'false';\r\n}\r\n\r\n// disabling and enabling animation section\r\nfunction disableAnimationsInHTML() {\r\n  toggleAnimationsContainer.dataset.disabled = 'true';\r\n  animationsButton.classList.remove('on');\r\n}\r\n\r\n// function enableAnimationsInHTML() {\r\n//   toggleAnimationsContainer.dataset.disabled = 'false';\r\n//   animationsButton.classList.add('on');\r\n// }\r\n\r\n// calculates possible numbers of mines and renders them on the screen\r\nconst calculatePossibleNumberOfMines = () => {\r\n  // calculating number of mines for each level\r\n  const options = new Map([\r\n    ['beginner', size],\r\n    ['intermediate', Math.ceil(size + size / 2)],\r\n    ['expert', size * 2]\r\n  ]);\r\n  // setting number of mines\r\n  numberOfMines = options.get('beginner');\r\n  difficultyLevelOptions.forEach(option => {\r\n    // setting number of mines in data- attribute\r\n    option.dataset.mines = options.get(option.value);\r\n    // selecting and rendering/changing HTML\r\n    const levelElement = option.closest('.level');\r\n    const textElement = levelElement.querySelector('.number-of-mines');\r\n    textElement.innerHTML = `&nbsp;&nbsp;-&nbsp;&nbsp;${options.get(\r\n      option.value\r\n    )}&nbsp;`;\r\n  });\r\n  // setting the first option as default (beginner level)\r\n  difficultyLevelOptions[0].checked = true;\r\n};\r\n\r\n// initial calculating possible number of mines\r\ncalculatePossibleNumberOfMines();\r\n\r\n// changing size of the game board\r\nBoardSizesOptions.forEach(option => {\r\n  option.addEventListener('click', e => {\r\n    // playing menu sound\r\n    if (music) {\r\n      openMenuSound.currentTime = 0;\r\n      openMenuSound.play();\r\n    }\r\n\r\n    const optionElement = e.target.closest('.option');\r\n    // setting new size\r\n    if (optionElement.dataset.disabled == 'true') return;\r\n    size = parseInt(optionElement.dataset.size);\r\n    // calculating new options connected to the number of mines\r\n    calculatePossibleNumberOfMines();\r\n    setActiveClassForCurrentBoardSize(size);\r\n  });\r\n});\r\n\r\nfunction setActiveClassForCurrentBoardSize(size) {\r\n  const targetBoardSizeElement = document.querySelector(\r\n    `.board-sizes .dimensions .option[data-size=\"${size}\"]`\r\n  );\r\n  // adding active class to clicked option\r\n  targetBoardSizeElement.classList.add('active');\r\n  // removing active class from other options\r\n  BoardSizesOptions.forEach(option => {\r\n    const optionElement = option.closest('.option');\r\n    if (optionElement.dataset.size != size) {\r\n      optionElement.classList.remove('active');\r\n    }\r\n  });\r\n}\r\n\r\n// changing number of mines on the game board\r\ndifficultyLevelOptions.forEach(option => {\r\n  const levelElement = option.closest('.level');\r\n  levelElement.addEventListener('click', e => {\r\n    // playing menu sound\r\n    if (music) {\r\n      openMenuSound.currentTime = 0;\r\n      openMenuSound.play();\r\n    }\r\n\r\n    if (e.target.matches('input')) {\r\n      numberOfMines = parseInt(e.target.dataset.mines);\r\n    }\r\n  });\r\n});\r\n\r\n// changing animation speed on the game board\r\nspeedOptions.forEach(option => {\r\n  const speedOptionElement = option.closest('.option');\r\n  speedOptionElement.addEventListener('click', e => {\r\n    // playing menu sound\r\n    if (music) {\r\n      openMenuSound.currentTime = 0;\r\n      openMenuSound.play();\r\n    }\r\n\r\n    if (e.target.matches('input')) {\r\n      animation.speed =\r\n        e.target.value == 'fast-speed'\r\n          ? ANIMATION_SPEEDS.FAST\r\n          : ANIMATION_SPEEDS.SLOW;\r\n    }\r\n  });\r\n});\r\n\r\n// renders the right image for the board-size menu according to the color theme\r\nconst renderProperBoardSizeMenuImage = () => {\r\n  const boardSizeImage12x12Element = document.querySelector(\r\n    '.board-sizes .dimensions .option:nth-child(1) .image img'\r\n  );\r\n  const boardSizeImage9x9Element = document.querySelector(\r\n    '.board-sizes .dimensions .option:nth-child(2) .image img'\r\n  );\r\n  const boardSizeImage6x6Element = document.querySelector(\r\n    '.board-sizes .dimensions .option:nth-child(3) .image img'\r\n  );\r\n\r\n  if (document.body.classList.contains('light')) {\r\n    boardSizeImage12x12Element.src = './src/12x12-board-lighter.PNG';\r\n    boardSizeImage9x9Element.src = './src/9x9-board-lighter.PNG';\r\n    boardSizeImage6x6Element.src = './src/6x6-board-lighter.PNG';\r\n  } else {\r\n    boardSizeImage12x12Element.src = './src/12x12-board.PNG';\r\n    boardSizeImage9x9Element.src = './src/9x9-board.PNG';\r\n    boardSizeImage6x6Element.src = './src/6x6-board.PNG';\r\n  }\r\n};\r\n\r\n// changes the overall color theme of the webpage according to body class\r\nconst checkTheme = () => {\r\n  const root = document.querySelector(':root');\r\n  if (document.body.classList.contains('light')) {\r\n    root.style.setProperty('color-scheme', 'light');\r\n  } else {\r\n    root.style.setProperty('color-scheme', 'dark');\r\n  }\r\n};\r\n\r\n// toggle dark-light mode\r\ndarkLightThemeContainer.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  document.body.classList.toggle('light');\r\n  renderProperBoardSizeMenuImage();\r\n  checkTheme();\r\n});\r\n\r\n// open/close menu\r\nmenuButton.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  menu.classList.toggle('open');\r\n});\r\n\r\n// closing menu if it's clicked outside of the menu\r\ndocument.addEventListener('click', e => {\r\n  if (e.target.closest('.menu')) return;\r\n  menu.classList.remove('open');\r\n});\r\n\r\nconst openCustomizeMenu = () => {\r\n  customizeContainer.classList.add('active');\r\n  customizeContainer.scrollTop = 0;\r\n  // document.body.style.overflowY = 'auto';\r\n  menu.classList.remove('open');\r\n  rulesContainer.classList.remove('active');\r\n  // preserves weird behaviors on the page (e.g. moving header section)\r\n  setTimeout(() => {\r\n    rulesContainer.style.position = 'fixed';\r\n  }, 0);\r\n};\r\n\r\n// open customize window\r\ncustomizeButtonInMenu.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  openCustomizeMenu();\r\n});\r\n\r\nconst closeCustomizeMenu = () => {\r\n  customizeContainer.classList.remove('active');\r\n}\r\n\r\n// close customize window\r\ncloseCustomizeWindowButton.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  closeCustomizeMenu();\r\n});\r\n\r\nconst openRulesContainer = () => {\r\n  rulesContainer.classList.add('active');\r\n  rulesContainer.scrollTop = 0;\r\n  // preserves weird behaviors on the page (e.g. moving header section)\r\n  setTimeout(() => {\r\n    rulesContainer.style.position = 'absolute';\r\n  }, 400);\r\n\r\n  menu.classList.remove('open');\r\n  customizeContainer.classList.remove('active');\r\n}\r\n\r\n// open rules window\r\nrulesButtonInMenu.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  openRulesContainer();\r\n});\r\n\r\nconst closeRulesWindow = () => {\r\n  rulesContainer.classList.remove('active');\r\n  // preserves weird behaviors on the page (e.g. moving header section)\r\n  setTimeout(() => {\r\n    rulesContainer.style.position = 'fixed';\r\n  }, 0);\r\n}\r\n\r\n// close rules window\r\ncloseRulesWindowButton.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  closeRulesWindow();\r\n});\r\n\r\nconst toggleAnimations = () => {\r\n  if (toggleAnimationsContainer.dataset.disabled == 'true') return;\r\n  animation.isAnimate = animation.isAnimate == false ? true : false;\r\n  animationsButton.classList.toggle('on');\r\n}\r\n\r\n// switching on/off the animations on the game board\r\ntoggleAnimationsButton.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  toggleAnimations();\r\n});\r\n\r\n// switching to another color of marked mines\r\nMarkedMinesColorOptions.forEach(option => {\r\n  option.addEventListener('click', e => {\r\n    // playing menu sound\r\n    if (music) {\r\n      openMenuSound.currentTime = 0;\r\n      openMenuSound.play();\r\n    }\r\n\r\n    // setting new color of marked mines\r\n    markedMinesColor = e.target.dataset.color;\r\n    // removing active class from every other color option element\r\n    MarkedMinesColorOptions.forEach(option =>\r\n      option.classList.remove('active')\r\n    );\r\n    // adding active class to the target element\r\n    e.target.classList.add('active');\r\n    // applies new marked mines color on board\r\n    updateMarkedMineColorOnBoard();\r\n  });\r\n});\r\n\r\n// switching to another image of mines\r\nminesImagesOptions.forEach(option => {\r\n  option.addEventListener('click', e => {\r\n    // playing menu sound\r\n    if (music) {\r\n      openMenuSound.currentTime = 0;\r\n      openMenuSound.play();\r\n    }\r\n\r\n    // setting new mine image\r\n    const targetImageOption = e.target.closest('.image');\r\n    minesImage = targetImageOption.dataset.mineImage;\r\n    // removing active class from every other mines image option\r\n    minesImagesOptions.forEach(option => option.classList.remove('active'));\r\n    // adding active class to the target mines image option\r\n    targetImageOption.classList.add('active');\r\n    // applies new mine image on board\r\n    updateMinesImageOnBoard();\r\n  });\r\n});\r\n\r\n// switching on/off sounds\r\ntoggleSoundButton.addEventListener('click', () => {\r\n  const state = toggleSoundButton.dataset.toggleSound;\r\n  if (state == 'sound-off') {\r\n    music = true;\r\n    backgroundMusic.play();\r\n    toggleSoundButton.dataset.toggleSound = 'sound-on';\r\n    toggleSoundButtonTooltip.textContent = 'Enable sounds';\r\n  } else {\r\n    // playing menu sound\r\n    if (music) {\r\n      openMenuSound.currentTime = 0;\r\n      openMenuSound.play();\r\n    }\r\n\r\n    music = false;\r\n    backgroundMusic.pause();\r\n    toggleSoundButton.dataset.toggleSound = 'sound-off';\r\n    toggleSoundButtonTooltip.textContent = 'Disable sounds';\r\n  }\r\n});\r\n\r\napplyChangesButton.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  resetGame();\r\n  checkBoardWidth();\r\n  customizeContainer.classList.remove('active');\r\n});\r\n\r\nfunction updateMarkedMineColorOnBoard() {\r\n  board.dataset.markedMinesColor = markedMinesColor;\r\n}\r\n\r\nfunction updateMinesImageOnBoard() {\r\n  board.classList.value = minesImage;\r\n}\r\n\r\nresourcesTrack.addEventListener('click', () => {\r\n  const parent = resourcesTrack.closest('.credits-container');\r\n  if (parent.dataset.opened == 'true')\r\n    parent.dataset.opened = ''\r\n  else\r\n  parent.dataset.opened = 'true'\r\n});\r\n\r\n// animation that triggers when you click on a 'Start game...' button at the beginning\r\ngetStartedButton.addEventListener('click', () => {\r\n  loader.dataset.loadingState = 'started';\r\n  getStartedButton.style.pointerEvents = 'none';\r\n  setTimeout(() => {\r\n    preExplosionSound.play();\r\n  }, 1000);\r\n  setTimeout(() => {\r\n    preExplosionSound.pause();\r\n    loaderExplosionSound.play();\r\n    document.querySelector('#loader .bomb img').style.opacity = 0;\r\n    // creating and rendering tiles when the loading animation is up to finish\r\n    resetGame();\r\n    checkBoardWidth();\r\n  }, 2700);\r\n  setTimeout(() => {\r\n    backgroundMusic.play();\r\n  }, 4200);\r\n  setTimeout(() => {\r\n    loaderExplosionSound.pause();\r\n  }, 4500)\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//                Game (events, functions, and so on...)\r\n\r\n// checks if board should be frozen or not (just if animations are turned on)\r\nconst freezeBoard = {\r\n  isFrozen: false,\r\n  durationOfFreezing: 0\r\n};\r\n// saves when the touchstart and touchend events occur\r\nlet startDate, endDate;\r\n\r\n// reset all global variables to initial values and restart game\r\nfunction resetGame() {\r\n  // resetting global variables\r\n  minesLeft = numberOfMines;\r\n  gameState = GAME_STATES.IN_PROGRESS;\r\n  // erasing tiles\r\n  board.innerHTML = '';\r\n  updateMinesLeft(minesLeft);\r\n  // recreating and rerendering tiles\r\n  tiles = createTiles(size, numberOfMines);\r\n  tiles.forEach(tile => renderTile(tile, animation));\r\n  // tiles.forEach(setBlanketDimensions);\r\n  if (animation.isAnimate) {\r\n    animateTiles(size, animation.speed);\r\n    freezeBoard.isFrozen = true;\r\n    freezeBoard.durationOfFreezing = size * (animation.speed ^ 2) * 16;\r\n    stopFreezing();\r\n  }\r\n}\r\n\r\n// stops freezing of the board after specified delay\r\nfunction stopFreezing() {\r\n  setTimeout(() => {\r\n    freezeBoard.isFrozen = false;\r\n  }, freezeBoard.durationOfFreezing);\r\n}\r\n\r\n// EVENT LISTENERS AND ADDITIONAL FUNCTIONS CONNECTED TO THEM\r\n\r\n// window and document events\r\nwindow.addEventListener('resize', () => {\r\n  checkWidthForRenderingProperties();\r\n  checkWidthForAnimationsAndBoard();\r\n  checkBoardWidth();\r\n});\r\nwindow.onload = () => {\r\n  // get started button animation\r\n  setTimeout(() => {\r\n    getStartedButton.style.animationName = 'fade-in';\r\n    getStartedButton.style.pointerEvents = 'initial';\r\n  }, 500);\r\n  // rendering certain properties according to the device width\r\n  checkWidthForRenderingProperties();\r\n  checkWidthForAnimationsAndBoard();\r\n};\r\n// disabling context menu\r\ndocument.oncontextmenu = () => false;\r\n\r\n// reset button is clicked\r\nresetButton.addEventListener('click', () => {\r\n  // playing menu sound\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n\r\n  resetGame();\r\n});\r\n\r\n// checks a device's width and sets allowed size of the board\r\nfunction checkWidthForAnimationsAndBoard() {\r\n  const width = window.innerWidth;\r\n  if (width <= 550 && width > 420 && animation.isAnimate) {\r\n    animation.isAnimate = false;\r\n    resetGame();\r\n  }\r\n  if (width <= 420 && width > 340 && size == 12) {\r\n    animation.isAnimate = false;\r\n    size = 9;\r\n    calculatePossibleNumberOfMines();\r\n    applySize(size);\r\n    resetGame();\r\n  }\r\n  if (width <= 340 && size != 6) {\r\n    animation.isAnimate = false;\r\n    size = 6;\r\n    calculatePossibleNumberOfMines();\r\n    applySize(size);\r\n    resetGame();\r\n  }\r\n}\r\n\r\ndocument.addEventListener('keydown', HandleShortcuts);\r\n\r\nfunction HandleShortcuts(e) {\r\n  // Alt + R -> restarts the game\r\n  if (e.altKey == true && e.code == 'KeyR') {\r\n    resetGame();\r\n    checkBoardWidth();\r\n    // closes rules container\r\n    closeRulesWindow();\r\n    // closes customize container\r\n    closeCustomizeMenu();\r\n  }\r\n  // Alt + I -> opens rules container\r\n  if (e.altKey == true && e.code == 'KeyI') {\r\n    if (!rulesContainer.classList.contains('active'))\r\n      openRulesContainer();\r\n  }\r\n  // Alt + C -> opens customize container\r\n  if (e.altKey == true && e.code == 'KeyC') {\r\n    if (!customizeContainer.classList.contains('active'))\r\n      openCustomizeMenu();\r\n  }\r\n  // Alt + A -> toggles board animations\r\n  if (e.altKey == true && e.code == 'KeyA') {\r\n    toggleAnimations();\r\n  }\r\n}\r\n\r\n// event listeners for each tile (computers)\r\ndocument.addEventListener('mousedown', e => {\r\n  if (isMobilePhoneOrTablet()) return;\r\n  if (e.target.closest('[data-state]') == undefined || e.target.closest('[data-state]') == null) return;\r\n\r\n  // console.log(e)\r\n\r\n  const dataStateElement = e.target.closest('[data-state]');\r\n\r\n  HandleClickOnATile(dataStateElement, { button: e.button });\r\n});\r\n\r\n// event listeners for each tile (mobile phones and tablets)\r\ndocument.addEventListener('touchstart', e => {\r\n  if (e.target.closest('[data-state]') == undefined) return;\r\n\r\n  startDate = new Date(e.timeStamp);\r\n});\r\n\r\ndocument.addEventListener('touchend', e => {\r\n  if (e.target.closest('[data-state]') == undefined) return;\r\n  const dataStateElement = e.target.closest('[data-state]');\r\n\r\n  endDate = new Date(e.timeStamp);\r\n  const durationOfTheTouch = new Date(\r\n    endDate.getTime() - startDate.getTime()\r\n  ).getMilliseconds();\r\n\r\n  HandleClickOnATile(dataStateElement, {\r\n    durationOfTheTouch: durationOfTheTouch\r\n  });\r\n});\r\n\r\n// handles when user clicked on a tile\r\nfunction HandleClickOnATile(\r\n  dataStateElement,\r\n  { button = 1, durationOfTheTouch = -1 }\r\n) {\r\n  // checks if game board is frozen or not\r\n  if (freezeBoard.isFrozen) return;\r\n\r\n  // console.log(durationOfTheTouch, button)\r\n\r\n  // checks if game is ended or not\r\n  if (gameState == GAME_STATES.ENDED) return;\r\n\r\n  const parent = dataStateElement.closest('[data-tile]');\r\n  const id = parseInt(parent.dataset.tileId);\r\n  const tile = tiles.find(tile => tile.id == id);\r\n\r\n  // user clicked on the left mouse button or just tapped on a screen\r\n  if (button == 0 || (durationOfTheTouch < 300 && durationOfTheTouch > 0)) {\r\n    if (tile.isMine) {\r\n      gameState = GAME_STATES.ENDED;\r\n      minesLeftLabel.textContent = '';\r\n      revealTiles(tiles);\r\n      if (music) {\r\n        explosionSound.play();\r\n        explosionSound.currentTime = 0;\r\n      }\r\n      openDefeatBox();\r\n    } else {\r\n      if (tile.state == TILE_STATES.MARKED) {\r\n        minesLeft++;\r\n        updateMinesLeft(minesLeft);\r\n      }\r\n      if (tile.numberOfMinesAroundMe == 0) {\r\n        if (!animation.isAnimate) {\r\n          revealEmptyTilesWithoutAnimatingTiles(tile, size);\r\n        } else {\r\n          revealEmptyTiles(tile, size, animation);\r\n        }\r\n      } else {\r\n        tile.state = TILE_STATES.NUMBER;\r\n        applyState(tile);\r\n        if (animation.isAnimate) {\r\n          const tileElement = board.querySelector(`[data-tile-id=\"${tile.id}\"`);\r\n          animateTile(tileElement, animation.speed, undefined, 'erase');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // user clicks on the right mouse button or tapped on a screen and held it for a second or more\r\n  if (button == 2 || durationOfTheTouch >= 300) {\r\n    if (minesLeft == 0 && tile.state !== TILE_STATES.MARKED) return;\r\n    if (tile.state !== TILE_STATES.HIDDEN && tile.state !== TILE_STATES.MARKED)\r\n      return;\r\n    tile.state =\r\n      tile.state === TILE_STATES.MARKED\r\n        ? TILE_STATES.HIDDEN\r\n        : TILE_STATES.MARKED;\r\n    applyState(tile);\r\n    minesLeft =\r\n      tile.state === TILE_STATES.HIDDEN ? minesLeft + 1 : minesLeft - 1;\r\n    updateMinesLeft(minesLeft);\r\n  }\r\n\r\n  // checks if the player is won or not\r\n  if (gameState !== GAME_STATES.ENDED && isWon(tiles)) {\r\n    gameState = GAME_STATES.ENDED;\r\n    minesLeftLabel.textContent = '';\r\n    revealTiles(tiles);\r\n    if (music) {\r\n      applauseSound.play();\r\n      applauseSound.currentTime = 0;\r\n    }\r\n    openVictoryBox();\r\n  }\r\n}\r\n\r\n// adds event listener to the button inside victory box\r\nopenCustomizeMenuVictoryButton.addEventListener('click', closeVictoryBox);\r\n\r\n// adds event listener to the button inside defeat box\r\nresetGameDefeatButton.addEventListener('click', closeDefeatBox);\r\n\r\n// closes victory box\r\nfunction closeVictoryBox() {\r\n  victoryContainer.dataset.state = 'hidden';\r\n  openCustomizeMenu();\r\n  applauseSound.pause();\r\n}\r\n\r\n// closes defeat box\r\nfunction closeDefeatBox() {\r\n  if (music) {\r\n    openMenuSound.currentTime = 0;\r\n    openMenuSound.play();\r\n  }\r\n  defeatContainer.dataset.state = 'hidden';\r\n  resetGame();\r\n  explosionSound.pause();\r\n}\r\n"]}